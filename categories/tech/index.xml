<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Tech - Category - Mackenzie Morgan</title><link>https://mackenzie.morgan.name/categories/tech/</link><description>Tech - Category - Mackenzie Morgan</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 27 Sep 2024 07:48:48 -0400</lastBuildDate><atom:link href="https://mackenzie.morgan.name/categories/tech/" rel="self" type="application/rss+xml"/><item><title>See you in New York</title><link>https://mackenzie.morgan.name/posts/see-you-in-new-york/</link><pubDate>Fri, 27 Sep 2024 07:48:48 -0400</pubDate><author>Mackenzie Morgan</author><guid>https://mackenzie.morgan.name/posts/see-you-in-new-york/</guid><description><![CDATA[<p>The <a href="https://codebeamnyc.com/#schedule" target="_blank" rel="noopener noreffer ">schedule for Code BEAM Lite NYC</a> has been posted, and I&rsquo;m on it. I will be the first talk after the keynote, so that&rsquo;s exciting! I&rsquo;ll be doing a new talk this time, on adapting how you think about algorithms when shifting from an imperative programming mindset to a functional programming mindset.</p>
<p>This&rsquo;ll be my third time speaking at a Code BEAM event. Relatedly, the <a href="https://www.youtube.com/watch?v=eMt_Wwp3N70" target="_blank" rel="noopener noreffer ">recording of my talk in Mexico City</a> has finally been uploaded to YouTube. Code BEAM recordings tend to be posted shortly before the following conference of a similar type (ie, that was a Code BEAM Lite and this is a Code BEAM Lite), probably to build excitement for the next one. Unfortunately, the audio isn&rsquo;t great, but if you want to hear what I sounded like doing public speaking <em>in Spanish</em> a year and a half ago, there you go. In the Spanish version, I took into account feedback from when I did it in <a href="https://www.youtube.com/watch?v=-hcvGTwPLFI" target="_blank" rel="noopener noreffer ">2022 in English</a>, adding a more substantial introduction.</p>]]></description></item><item><title>Bulk Delete Twitter Messages</title><link>https://mackenzie.morgan.name/posts/bulk-delete-twitter-messages/</link><pubDate>Fri, 09 Dec 2022 23:43:37 -0500</pubDate><author>Mackenzie Morgan</author><guid>https://mackenzie.morgan.name/posts/bulk-delete-twitter-messages/</guid><description><![CDATA[<p>Hey, are you leaving Twitter? Are you worried that with 80% of the staff gone, it&rsquo;s just a matter of time until there start being unreported breaches? (Heck, maybe there have already!) Want to ensure anyone breaking into your account doesn&rsquo;t read your messages? Have a bulk-delete script, on the house!</p>
<p>To use this, go to <a href="https://twitter.com/messages" target="_blank" rel="noopener noreffer ">the messages page</a> on a computer. Right click somewhere on the page, and choose &ldquo;inspect&rdquo; (Chrome) or &ldquo;inspect element&rdquo; (Firefox) to get the developer tools to come up. (If you&rsquo;ve never seen that before, welcome to how so many of us learned to do things on the web!) In there, go to the tab labeled &ldquo;Console.&rdquo; Paste the following in and hit the enter or return key:</p>]]></description></item><item><title>Well, that's a Friday</title><link>https://mackenzie.morgan.name/posts/well-thats-a-friday/</link><pubDate>Wed, 09 Nov 2022 00:09:29 -0500</pubDate><author>Mackenzie Morgan</author><guid>https://mackenzie.morgan.name/posts/well-thats-a-friday/</guid><description><![CDATA[<p>This past Friday, I spoke at <a href="https://codebeamamerica.com/talks/typing-with-pixie-dust/" target="_blank" rel="noopener noreffer ">Code Beam America</a>, and <a href="https://www.routledge.com/The-Quaker-World/Daniels-Grant/p/book/9780367142513" target="_blank" rel="noopener noreffer ">The Quaker World</a> was published.</p>
<p>I haven&rsquo;t spoken at many conferences in the last decade. I did the Elixir Wizards one virtually last year, and this is the first time in person since 2011.</p>
<p>It&rsquo;s just a surprising coincidence that the book was published the same day. I wrote that chapter <em>two years ago</em>!</p>]]></description></item><item><title>How's the Gender Ratio?</title><link>https://mackenzie.morgan.name/posts/hows-the-gender-ratio/</link><pubDate>Sat, 01 Jan 2022 10:54:40 -0500</pubDate><author>Mackenzie Morgan</author><guid>https://mackenzie.morgan.name/posts/hows-the-gender-ratio/</guid><description><![CDATA[<p>I recently completed a job hunt. I was a lot more intentional this time about having a list of questions to ask the companies I was interviewing with. I highly recommend <a href="https://www.keyvalues.com/culture-queries" target="_blank" rel="noopener noreffer ">Key Values</a> for generating a list of questions to ask. They explain <em>why</em> they&rsquo;re worded the way they are, too.</p>
<p>I did ask one thing in a way they didn&rsquo;t suggest, though. Diversity, equity, and inclusion (DEI) is a hot topic, and I know that asking specifically with those words is likely to get me a canned answer. I wanted to avoid that. And of course, I can look at a company&rsquo;s &ldquo;About Us&rdquo; page on their website and scroll through their LinkedIn results to get a sense of their gender and racial diversity.</p>]]></description></item><item><title>Advent of Code 2021</title><link>https://mackenzie.morgan.name/posts/advent-of-code-2021/</link><pubDate>Sun, 19 Dec 2021 21:09:29 -0500</pubDate><author>Mackenzie Morgan</author><guid>https://mackenzie.morgan.name/posts/advent-of-code-2021/</guid><description><![CDATA[<p>In general, I regard myself as pretty bad at algorithms. I&rsquo;m comfortable enough doing <a href="https://exercism.org/tracks/elixir" target="_blank" rel="noopener noreffer ">the Elixir track on Exercism</a> (that&rsquo;s how I learned Elixir), and I&rsquo;ve used <a href="https://www.hackerrank.com/" target="_blank" rel="noopener noreffer ">HackerRank</a> some, but the reason I used HackerRank was because <a href="https://triplebyte.com/candidates" target="_blank" rel="noopener noreffer ">TripleByte</a> said algorithms were my weak point. (It said architecture was my strong suit, and I&rsquo;m quite pleased with that, as I did put effort into improving on that front.) I really dislike white boarding in job interviews (both because of the nerves factor and because the problems are usually totally unrelated to the job) and so much prefer take-homes.</p>]]></description></item><item><title>Pretty Waterfalls in Honeycomb for an Absinthe app</title><link>https://mackenzie.morgan.name/posts/pretty-waterfalls-in-honeycomb/</link><pubDate>Wed, 27 Oct 2021 10:14:01 -0400</pubDate><author>Mackenzie Morgan</author><guid>https://mackenzie.morgan.name/posts/pretty-waterfalls-in-honeycomb/</guid><description><![CDATA[<p>When first setting up the Absinthe app I work on, someone added <a href="https://github.com/opencensus-beam/opencensus_honeycomb" target="_blank" rel="noopener noreffer ">OpenCensus Honeycomb package</a>. The way it was set up was very basic: each top-level query had tracing attached.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elixir" data-lang="elixir"><span class="line"><span class="cl"><span class="ss">:object</span> <span class="n">queries</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">  <span class="n">field</span> <span class="ss">:getStuff</span><span class="p">,</span> <span class="ss">:stuff</span> <span class="k">do</span>
</span></span><span class="line hl"><span class="cl">    <span class="n">meta</span> <span class="ss">:trace</span><span class="p">,</span> <span class="no">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">arg</span> <span class="ss">:input</span><span class="p">,</span> <span class="ss">:string</span>
</span></span><span class="line"><span class="cl">    <span class="n">resolve</span> <span class="o">&amp;</span><span class="nc">Resolver</span><span class="o">.</span><span class="n">stuff_resolver</span><span class="o">/</span><span class="mi">3</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre></div>
<p>This got us information on how long each query took, so we could see which query needed to be optimized and do some debugging when performance issues hit. But it didn&rsquo;t drill down like I wanted.</p>]]></description></item><item><title>Reusable Django Admin Filters</title><link>https://mackenzie.morgan.name/posts/reusable-django-admin-filters/</link><pubDate>Tue, 26 Oct 2021 14:14:01 -0400</pubDate><author>Mackenzie Morgan</author><guid>https://mackenzie.morgan.name/posts/reusable-django-admin-filters/</guid><description><![CDATA[<p>It&rsquo;s fairly common to have a many-to-many connection to a <code>User</code> model. But sometimes, you have a <em>lot</em> of users in that table.</p>
<h2 id="problem-1-relations-to-large-tables-are-unwieldy">Problem 1: relations to large tables are unwieldy</h2>
<p>If we let the Django Admin load every single user into the dropdown in the Django Admin, it&rsquo;s unusable. The dropdowns are too long. The page takes too long to load. We need to filter it in advance.</p>
<p><a href="https://stackoverflow.com/a/25973594/418929" target="_blank" rel="noopener noreffer ">Dig around a bit online</a>, and you&rsquo;ll find some code of this form:</p>]]></description></item><item><title>How to Network</title><link>https://mackenzie.morgan.name/posts/how-to-network/</link><pubDate>Mon, 20 Sep 2021 04:39:51 +0000</pubDate><author>Mackenzie Morgan</author><guid>https://mackenzie.morgan.name/posts/how-to-network/</guid><description><![CDATA[<p>Maybe you&rsquo;re about to graduate, just graduated, or have been teaching yourself to code for the last few years, and you don&rsquo;t know how to get your foot in the door with that first job. You see all those &ldquo;entry-level&rdquo; jobs that expect a year or three of experience. Networking is incredibly important, especially if you don&rsquo;t have any professional experience in the tech industry yet.</p>
<p>We&rsquo;ve all heard it: &ldquo;it&rsquo;s not what you know; it&rsquo;s who you know.&rdquo; I, personally, have gotten only two jobs (in a 14-year career) from a cold start. And frankly, one wasn&rsquo;t a true cold start; a recruiter asked if he could show my 2017 resume to the company where I&rsquo;d done my first internship, way back in 2007.</p>]]></description></item><item><title>Elixir Wizards Talk: "Dealing With a Monster Ecto Query"</title><link>https://mackenzie.morgan.name/posts/elixir-wizards-talk/</link><pubDate>Thu, 29 Jul 2021 00:27:31 -0400</pubDate><author>Mackenzie Morgan</author><guid>https://mackenzie.morgan.name/posts/elixir-wizards-talk/</guid><description><![CDATA[<p>Last month, I spoke at the first-ever <a href="https://smartlogic.io/about/community/elixir-wizards-conference/" target="_blank" rel="noopener noreffer ">Elixir Wizards Conference</a>. It was a lightning talk walking through a refactor I did before the 2020 US Presidential Election, titled &ldquo;Dealing With a Monster Ecto Query.&rdquo;</p>
<p>I work for a news company, so the presidential election is a huge deal; we can&rsquo;t have downtime. I knew which query was our bottleneck, so I optimized it right before the election. This took advantage of a few Elixir features, like atoms, the pin operator, and concurrency primitives.</p>]]></description></item><item><title>Start of a List</title><link>https://mackenzie.morgan.name/posts/start-of-a-list/</link><pubDate>Tue, 18 May 2021 22:16:01 -0400</pubDate><author>Mackenzie Morgan</author><guid>https://mackenzie.morgan.name/posts/start-of-a-list/</guid><description><![CDATA[<p>Elixir has a <em>lot</em> of ways to get the first thing in a list. One of the first things you learn from the basic syntax guide on the Elixir website is that <code>hd(foo)</code> gets the first thing in a list, and <code>tl(foo)</code> gets the rest. You also learn <code>[ head | tail ] = foo</code>.</p>
<p>But what happens when it&rsquo;s an empty list?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elixir" data-lang="elixir"><span class="line"><span class="cl"><span class="n">iex</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">foo</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="n">iex</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">hd</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="p">(</span><span class="nc">ArgumentError</span><span class="p">)</span> <span class="n">argument</span> <span class="n">error</span>
</span></span><span class="line"><span class="cl">    <span class="ss">:erlang</span><span class="o">.</span><span class="n">hd</span><span class="p">([])</span>
</span></span><span class="line"><span class="cl"><span class="n">iex</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">tl</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="p">(</span><span class="nc">ArgumentError</span><span class="p">)</span> <span class="n">argument</span> <span class="n">error</span>
</span></span><span class="line"><span class="cl">    <span class="ss">:erlang</span><span class="o">.</span><span class="n">tl</span><span class="p">([])</span></span></span></code></pre></div>
<p>Those first bits of syntax you learned will throw errors if given empty lists. That means you need to only use them after confirming the list has stuff in it, such as with a conditional or by pattern-matching.</p>]]></description></item></channel></rss>
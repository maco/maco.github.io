<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Code - Tag - Mackenzie Morgan</title><link>https://mackenzie.morgan.name/tags/code/</link><description>Code - Tag - Mackenzie Morgan</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 27 Oct 2021 10:14:01 -0400</lastBuildDate><atom:link href="https://mackenzie.morgan.name/tags/code/" rel="self" type="application/rss+xml"/><item><title>Pretty Waterfalls in Honeycomb for an Absinthe app</title><link>https://mackenzie.morgan.name/posts/pretty-waterfalls-in-honeycomb/</link><pubDate>Wed, 27 Oct 2021 10:14:01 -0400</pubDate><author>Mackenzie Morgan</author><guid>https://mackenzie.morgan.name/posts/pretty-waterfalls-in-honeycomb/</guid><description><![CDATA[<p>When first setting up the Absinthe app I work on, someone added <a href="https://github.com/opencensus-beam/opencensus_honeycomb" target="_blank" rel="noopener noreffer ">OpenCensus Honeycomb package</a>. The way it was set up was very basic: each top-level query had tracing attached.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elixir" data-lang="elixir"><span class="line"><span class="cl"><span class="ss">:object</span> <span class="n">queries</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">  <span class="n">field</span> <span class="ss">:getStuff</span><span class="p">,</span> <span class="ss">:stuff</span> <span class="k">do</span>
</span></span><span class="line hl"><span class="cl">    <span class="n">meta</span> <span class="ss">:trace</span><span class="p">,</span> <span class="no">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">arg</span> <span class="ss">:input</span><span class="p">,</span> <span class="ss">:string</span>
</span></span><span class="line"><span class="cl">    <span class="n">resolve</span> <span class="o">&amp;</span><span class="nc">Resolver</span><span class="o">.</span><span class="n">stuff_resolver</span><span class="o">/</span><span class="mi">3</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pr]]></description></item><item><title>Reusable Django Admin Filters</title><link>https://mackenzie.morgan.name/posts/reusable-django-admin-filters/</link><pubDate>Tue, 26 Oct 2021 14:14:01 -0400</pubDate><author>Mackenzie Morgan</author><guid>https://mackenzie.morgan.name/posts/reusable-django-admin-filters/</guid><description><![CDATA[<p>It&rsquo;s fairly common to have a many-to-many connection to a <code>User</code> model. But sometimes, you have a <em>lot</em> of users in that table.</p>
<h2 id="problem-1-relations-to-large-tables-are-unwieldy">Problem 1: relations to large tables are unwieldy</h2>
<p>If we let the Django Admin load every single user into the dropdown in the Django Admin, it&rsquo;s unusable. The dropdowns are too long. The page takes too long to load. We need to filter it in advance.</p>]]></description></item><item><title>Elixir Wizards Talk: "Dealing With a Monster Ecto Query"</title><link>https://mackenzie.morgan.name/posts/elixir-wizards-talk/</link><pubDate>Thu, 29 Jul 2021 00:27:31 -0400</pubDate><author>Mackenzie Morgan</author><guid>https://mackenzie.morgan.name/posts/elixir-wizards-talk/</guid><description><![CDATA[<p>Last month, I spoke at the first-ever <a href="https://smartlogic.io/about/community/elixir-wizards-conference/" target="_blank" rel="noopener noreffer ">Elixir Wizards Conference</a>. It was a lightning talk walking through a refactor I did before the 2020 US Presidential Election, titled &ldquo;Dealing With a Monster Ecto Query.&rdquo;</p>
<p>I work for a news company, so the presidential election is a huge deal; we can&rsquo;t have downtime. I knew which query was our bottleneck, so I optimized it right before the election. This took advantage of a few Elixir features, like atoms, the pin operator, and concurrency primitives.</p>]]></description></item><item><title>Start of a List</title><link>https://mackenzie.morgan.name/posts/start-of-a-list/</link><pubDate>Tue, 18 May 2021 22:16:01 -0400</pubDate><author>Mackenzie Morgan</author><guid>https://mackenzie.morgan.name/posts/start-of-a-list/</guid><description><![CDATA[<p>Elixir has a <em>lot</em> of ways to get the first thing in a list. One of the first things you learn from the basic syntax guide on the Elixir website is that <code>hd(foo)</code> gets the first thing in a list, and <code>tl(foo)</code> gets the rest. You also learn <code>[ head | tail ] = foo</code>.</p>
<p>But what happens when it&rsquo;s an empty list?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elixir" data-lang="elixir"><span class="line"><span class="cl"><span class="n">iex</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">foo</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="n">iex</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">hd</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="p">(</span><span class="nc">ArgumentError</span><span class="p">)</span> <span class="n">argument</span> <span class="n">error</span>
</span></span><span class="line"><span class="cl">    <span class="ss">:erlang</span><span class="o">.</span><span class="n">hd</span><span class="p">([])</span>
</span></span><span class="line"><span class="cl"><span class="n">iex</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">tl</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="p">(</span><span class="nc">ArgumentError</span><span class="p">)</span> <span class="n">argument</span> <span class="n">error</span>
</span></span><span class="line"><span class="cl">    <span class="ss">:erlang</span><span class="o">.</span><span class="n">tl</span><span class="p">([])</span></span></span></code></pr]]></description></item><item><title>Django Admin color picker</title><link>https://mackenzie.morgan.name/posts/django-admin-color-picker/</link><pubDate>Fri, 06 Nov 2020 03:09:31 -0500</pubDate><author>Mackenzie Morgan</author><guid>https://mackenzie.morgan.name/posts/django-admin-color-picker/</guid><description><![CDATA[<p>When I add a new model to the Django app at work, I try to make sure the results in the Django admin have good usability, too. Just because it&rsquo;ll be mainly developers (and a few project managers) seeing it doesn&rsquo;t mean I can neglect usability. Consequently, I spend some time on hacking the Django admin. My manager says I&rsquo;ve been making it do things he didn&rsquo;t even realize were possible.</p>]]></description></item></channel></rss>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Elixir - Tag - Mackenzie Morgan</title><link>https://mackenzie.morgan.name/tags/elixir/</link><description>Elixir - Tag - Mackenzie Morgan</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 19 Dec 2021 21:09:29 -0500</lastBuildDate><atom:link href="https://mackenzie.morgan.name/tags/elixir/" rel="self" type="application/rss+xml"/><item><title>Advent of Code 2021</title><link>https://mackenzie.morgan.name/posts/advent-of-code-2021/</link><pubDate>Sun, 19 Dec 2021 21:09:29 -0500</pubDate><author>Mackenzie Morgan</author><guid>https://mackenzie.morgan.name/posts/advent-of-code-2021/</guid><description><![CDATA[<p>In general, I regard myself as pretty bad at algorithms. I&rsquo;m comfortable enough doing <a href="https://exercism.org/tracks/elixir" target="_blank" rel="noopener noreffer ">the Elixir track on Exercism</a> (that&rsquo;s how I learned Elixir), and I&rsquo;ve used <a href="https://www.hackerrank.com/" target="_blank" rel="noopener noreffer ">HackerRank</a> some, but the reason I used HackerRank was because <a href="https://triplebyte.com/candidates" target="_blank" rel="noopener noreffer ">TripleByte</a> said algorithms were my weak point. (It said architecture was my strong suit, and I&rsquo;m quite pleased with that, as I did put effort into improving on that front.) I really dislike white boarding in job interviews (both because of the nerves factor and because the problems are usually totally unrelated to the job) and so much prefer take-homes.</p>]]></description></item><item><title>Pretty Waterfalls in Honeycomb for an Absinthe app</title><link>https://mackenzie.morgan.name/posts/pretty-waterfalls-in-honeycomb/</link><pubDate>Wed, 27 Oct 2021 10:14:01 -0400</pubDate><author>Mackenzie Morgan</author><guid>https://mackenzie.morgan.name/posts/pretty-waterfalls-in-honeycomb/</guid><description><![CDATA[<p>When first setting up the Absinthe app I work on, someone added <a href="https://github.com/opencensus-beam/opencensus_honeycomb" target="_blank" rel="noopener noreffer ">OpenCensus Honeycomb package</a>. The way it was set up was very basic: each top-level query had tracing attached.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elixir" data-lang="elixir"><span class="line"><span class="cl"><span class="ss">:object</span> <span class="n">queries</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">  <span class="n">field</span> <span class="ss">:getStuff</span><span class="p">,</span> <span class="ss">:stuff</span> <span class="k">do</span>
</span></span><span class="line hl"><span class="cl">    <span class="n">meta</span> <span class="ss">:trace</span><span class="p">,</span> <span class="no">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">arg</span> <span class="ss">:input</span><span class="p">,</span> <span class="ss">:string</span>
</span></span><span class="line"><span class="cl">    <span class="n">resolve</span> <span class="o">&amp;</span><span class="nc">Resolver</span><span class="o">.</span><span class="n">stuff_resolver</span><span class="o">/</span><span class="mi">3</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span></span></span></code></pre></div>
<p>This got us information on how long each query took, so we could see which query needed to be optimized and do some debugging when performance issues hit. But it didn&rsquo;t drill down like I wanted.</p>]]></description></item><item><title>Elixir Wizards Talk: "Dealing With a Monster Ecto Query"</title><link>https://mackenzie.morgan.name/posts/elixir-wizards-talk/</link><pubDate>Thu, 29 Jul 2021 00:27:31 -0400</pubDate><author>Mackenzie Morgan</author><guid>https://mackenzie.morgan.name/posts/elixir-wizards-talk/</guid><description><![CDATA[<p>Last month, I spoke at the first-ever <a href="https://smartlogic.io/about/community/elixir-wizards-conference/" target="_blank" rel="noopener noreffer ">Elixir Wizards Conference</a>. It was a lightning talk walking through a refactor I did before the 2020 US Presidential Election, titled &ldquo;Dealing With a Monster Ecto Query.&rdquo;</p>
<p>I work for a news company, so the presidential election is a huge deal; we can&rsquo;t have downtime. I knew which query was our bottleneck, so I optimized it right before the election. This took advantage of a few Elixir features, like atoms, the pin operator, and concurrency primitives.</p>]]></description></item><item><title>Start of a List</title><link>https://mackenzie.morgan.name/posts/start-of-a-list/</link><pubDate>Tue, 18 May 2021 22:16:01 -0400</pubDate><author>Mackenzie Morgan</author><guid>https://mackenzie.morgan.name/posts/start-of-a-list/</guid><description><![CDATA[<p>Elixir has a <em>lot</em> of ways to get the first thing in a list. One of the first things you learn from the basic syntax guide on the Elixir website is that <code>hd(foo)</code> gets the first thing in a list, and <code>tl(foo)</code> gets the rest. You also learn <code>[ head | tail ] = foo</code>.</p>
<p>But what happens when it&rsquo;s an empty list?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elixir" data-lang="elixir"><span class="line"><span class="cl"><span class="n">iex</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">foo</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="n">iex</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">hd</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="p">(</span><span class="nc">ArgumentError</span><span class="p">)</span> <span class="n">argument</span> <span class="n">error</span>
</span></span><span class="line"><span class="cl">    <span class="ss">:erlang</span><span class="o">.</span><span class="n">hd</span><span class="p">([])</span>
</span></span><span class="line"><span class="cl"><span class="n">iex</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">tl</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">**</span> <span class="p">(</span><span class="nc">ArgumentError</span><span class="p">)</span> <span class="n">argument</span> <span class="n">error</span>
</span></span><span class="line"><span class="cl">    <span class="ss">:erlang</span><span class="o">.</span><span class="n">tl</span><span class="p">([])</span></span></span></code></pre></div>
<p>Those first bits of syntax you learned will throw errors if given empty lists. That means you need to only use them after confirming the list has stuff in it, such as with a conditional or by pattern-matching.</p>]]></description></item><item><title>Dang, Elixir is stable</title><link>https://mackenzie.morgan.name/posts/dang-elixir-is-stable/</link><pubDate>Sat, 20 Mar 2021 21:12:59 -0400</pubDate><author>Mackenzie Morgan</author><guid>https://mackenzie.morgan.name/posts/dang-elixir-is-stable/</guid><description><![CDATA[<p>On Monday, my manager asked about on-call coverage for the Elixir app I work on. There are only a handful of people in the company who know Elixir, and he was concerned that I would feel like I couldn&rsquo;t take a vacation.</p>
<p><strong>Him:</strong> How often do you get on-call alerts?</p>
<p><strong>Me:</strong> <em>shrug</em> Never &#x1f60f;</p>
<p><strong>Him:</strong> Wait, what? Do you have them set up? Do they work? &#x1f630;</p>
<p><strong>Me:</strong> Yeah, they&rsquo;re set up, and yes, they work, but the interval&hellip;Two weeks ago, another team made a change that affected us without telling us, and that caused an alert. That was the first alert since before the election.</p>]]></description></item><item><title>Attending Code BEAM</title><link>https://mackenzie.morgan.name/posts/attending-code-beam/</link><pubDate>Sat, 13 Mar 2021 14:39:55 -0500</pubDate><author>Mackenzie Morgan</author><guid>https://mackenzie.morgan.name/posts/attending-code-beam/</guid><description><![CDATA[<p>Last week, <a href="https://github.com/miriampena" target="_blank" rel="noopener noreffer ">Miriam Pena</a> from the <a href="https://erlef.org/" target="_blank" rel="noopener noreffer ">Erlang Ecosystem Foundation</a>&rsquo;s education working group mentioned in the <a href="https://elixir-lang.org" target="_blank" rel="noopener noreffer ">Elixir</a> Slack&rsquo;s channel for women and other minority genders that <a href="http://codesync.global/conferences/code-beam-v-america-2021/" target="_blank" rel="noopener noreffer ">Code BEAM V America</a> was coming up. She said the working group had a handful of tickets available for students, folks who can&rsquo;t otherwise afford to go, and people in groups that are underrepresented in tech.</p>
<p>I&rsquo;ve never applied for a &ldquo;diversity&rdquo; ticket to a conference before, but she said they&rsquo;d pre-purchased them, and the conference was 6 days away. Also, the <a href="https://www.youtube.com/watch?v=-nVgAcy9wB0" target="_blank" rel="noopener noreffer ">2020 Elixir survey results</a> say the community is 2% women, which is rather like the open source numbers back when I started doing that. (I hope the open source numbers have grown?) So, I figured it was probably ok to claim one.</p>]]></description></item></channel></rss>